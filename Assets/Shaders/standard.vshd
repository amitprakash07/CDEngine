/* #include statement (platform - independent) */
#include "shaders.common"

/* Uniform varibales (platform-independent) */
struct CameraMatrices
{
	mat4 _world_view_mtarix;
	mat4 _view_project_matrix;
};

uniform CameraMatrices g_CameraMatrices;
uniform mat4 g_local_world_matrix;
//uniform mat4 g_world_view_mtarix;
//uniform mat4 g_view_project_matrix;

/* Input/Output variables (platform-specific) */
#if defined( EAEENGINE_PLATFORM_D3D9 )
// Entry Point
//============
void main(
	// Input
	//======
	// The "semantics" (the keywords in all caps after the colon) are arbitrary,
	// but must match the C call to CreateVertexDeclaration()

	// These values come from one of the sVertex that we filled the vertex buffer with in C code
	in const float3 i_position_local : POSITION,
	in const float3 i_normalLocal : NORMAL,
	in const float2 i_texcoords : TEXCOORD0,
	in const float4 i_color : COLOR,

	// Output
	//=======
	// A POSITION value must always be output from every vertex shader
	// so that the GPU can figure out which fragments need to be shaded
	out float4 o_position : POSITION,
	// Output the normal for the fragment shader
	out float3 o_normalWorld : NORMAL,
	// We need to output the uv for the fragment shader to sample color from textures
	out float2 o_texcoords : TEXCOORD0,
	// Any other data is optional; the GPU doesn't know or care what it is,
	// and will merely interpolate it across the triangle
	// and give us the resulting interpolated value in a fragment shader.
	// It is then up to us to use it however we want to.
	// The "semantics" are used to match the vertex shader outputs
	// with the fragment shader inputs
	// (note that OpenGL uses arbitrarily assignable number IDs to do the same thing).
	out float4 o_color : COLOR
	)

#elif defined ( EAEENGINE_PLATFORM_GL )

// The locations assigned are arbitrary
// but must match the C calls to glVertexAttribPointer()

// These values come from one of the sVertex that we filled the vertex buffer with in C code
layout(location = 0) in vec3 i_position_local;
layout(location = 1) in vec3 i_normalLocal;
layout(location = 2) in vec2 i_texcoords;
layout(location = 3) in vec4 i_color;

// Output
//=======

// The vertex shader must always output a position value,
// but unlike HLSL where the value is explicit
// GLSL has an implicit required variable called "gl_Position"

// Any other data is optional; the GPU doesn't know or care what it is,
// and will merely interpolate it across the triangle
// and give us the resulting interpolated value in a fragment shader
// It is then up to us to use it however we see fit.
// The loations are used to match the vertex shader outputs
// with the fragment shader inputs
// (note that Direct3D uses arbitrarily assignable "semantics").
layout(location = 0) out vec3 o_normalWorld;
layout(location = 1) out vec2 o_texcoords;
layout(location = 2) out vec4 o_color;

// Entry Point
//============
void main()
#endif

/* main() function definition (platform-independent) */
{
	// Calculate the position of this vertex on screen
	{
		// The position stored in the vertex is in "local space",
		// meaning that it is relative to the center (or "origin", or "pivot")
		// of the mesh.
		// The graphics hardware needs the position of the vertex
		// in normalized device coordinates,
		// meaning where the position of the vertex should be drawn
		// on the screen.
		// This position that we need to output, then,
		// is the result of taking the original vertex in local space
		// and transforming it into "screen space".

		// Any matrix transformations that include translation
		// will operate on a float4 position,
		// which _must_ have 1 for the w value
		float4 position_world = Transform(float4(i_position_local, 1.0), g_local_world_matrix);
		//float4 position_view = Transform(position_world, g_world_view_mtarix);
		//o_position = Transform(position_view, g_view_project_matrix);
		float4 position_view = Transform(position_world, g_CameraMatrices._world_view_mtarix);
		o_position = Transform(position_view, g_CameraMatrices._view_project_matrix);
	}
	// Pass the input normal to the fragment shader,
	// So we need to tran
	{
		/*
		vec4 normalLocal = vec4(i_normalLocal, 0.0f);
		mat4 transposedLocalToWorld = transpose(g_local_world_matrix);
		vec4 normalWorld = Transform( normalLocal, transposedLocalToWorld );
		o_normalWorld = normalWorld.xyz;
		*/
		mat3 rotation_localToWorld = mat3(
		g_local_world_matrix[0].xyz,
		g_local_world_matrix[1].xyz,
		g_local_world_matrix[2].xyz );
		o_normalWorld = Transform( i_normalLocal, rotation_localToWorld );
	}
	// Pass the input uv to the fragment shader unchanged:
	{
		o_texcoords = i_texcoords;
	}
	// Pass the input color to the fragment shader unchanged:
	{
		o_color = i_color;
	}
}
