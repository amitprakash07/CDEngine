/* #include statement (platform - independent) */
#include "shaders.common"

uniform vec3 g_RGBColor;
uniform float g_alpha;
uniform sampler2D g_sampler2D;

/* Input/Output variables (platform-specific) */
#if defined( EAEENGINE_PLATFORM_D3D9 )
	// Entry Point
	//============
	void main(
		// Input
		//======
		// Whatever arbitrary data (i.e. everything excluding position) was output from the vertex shader
		// will be interpolated across the triangle and given as input to the fragment shader
		in float3 i_normalWorld : NORMAL,
		in float2 i_texcoords : TEXCOORD0,
		in float4 i_color : COLOR0,

		// Output
		//=======
		// Whatever color value is output from the fragment shader
		// will determine the color of the corresponding pixel on the screen
		out float4 o_color : COLOR0
		)
#elif defined( EAEENGINE_PLATFORM_GL )
	// Input
	//======
	// Whatever arbitrary data (i.e. everything excluding position) was output from the vertex shader
	// will be interpolated across the triangle and given as input to the fragment shader
	layout(location = 0) in vec3 i_normalWorld;
	layout(location = 1) in vec2 i_texcoords;
	layout(location = 2) in vec4 i_color;

	// Output
	//=======
	// Whatever color value is output from the fragment shader
	// will determine the color of the corresponding pixel on the screen
	out vec4 o_color;

	// Entry Point
	//============
	void main()
#endif

/* main() function definition (platform-independent) */
	{
		// Set the fragment to the interpolated color that originated as per-vertex data
		// (where color is represented by 4 floats representing "RGBA" == "Red/Green/Blue/Alpha")
		{
			vec4 textureColor = texture2D(g_sampler2D, i_texcoords);
			o_color = i_color * textureColor;
		}
		o_color.rgb *= g_RGBColor;
		o_color.a = o_color.a * g_alpha;
	}