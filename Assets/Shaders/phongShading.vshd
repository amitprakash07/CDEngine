/* #include statement (platform - independent) */
#include "shaders.common"
#include "cameraMatrix.common"


/* Uniform varibales (platform-independent) */
uniform mat4 g_local_world_matrix;
// Position of light
uniform vec3 _light_pos = vec3(0.0, 50.0, 0.0);
// Position of Camera
uniform vec3 _camera_pos = vec3(0.0, 0.0, 0.0);

/* Input/Output variables (platform-specific) */
#if defined( EAEENGINE_PLATFORM_D3D9 )
// Entry Point
//============
void main(
	// Input
	//======
	in const float3 i_position_local : POSITION,
	in const float3 i_normalLocal : NORMAL,
	in const float2 i_texcoords : TEXCOORD0,
	in const float4 i_color : COLOR,
	// Output
	//=======
	out float4 o_position : POSITION,
	out float3 o_normalWorld : NORMAL,
	out float2 o_texcoords : TEXCOORD0,
	out float4 o_color : COLOR,
	out float3 o_lightDir : TEXCOORD1,
	out float3 o_viewDir : TEXCOORD2
	)

#elif defined ( EAEENGINE_PLATFORM_GL )

// Input
//======
layout(location = 0) in vec3 i_position_local;
layout(location = 1) in vec3 i_normalLocal;
layout(location = 2) in vec2 i_texcoords;
layout(location = 3) in vec4 i_color;
// Output
//=======
layout(location = 0) out vec3 o_normalWorld;
layout(location = 1) out vec2 o_texcoords;
layout(location = 2) out vec4 o_color;
layout(location = 3) out vec3 o_lightDir;
layout(location = 4) out vec3 o_viewDir;

// Entry Point
//============
void main()
#endif

/* main() function definition (platform-independent) */
{
	// Calculate the position of this vertex on screen
	float4 position_world = Transform(float4(i_position_local, 1.0f), g_local_world_matrix);
	float4 position_view = Transform(position_world, worldViewMatrix);
	o_position = Transform(position_view, viewProjMatrix);
	// Pass the input normal to the fragment shader,
	{
		// convert to world space
		mat3 rotation_localToWorld = mat3(
		g_local_world_matrix[0].xyz,
		g_local_world_matrix[1].xyz,
		g_local_world_matrix[2].xyz );
		o_normalWorld = Transform( i_normalLocal, rotation_localToWorld );
	}
	// Pass the input uv to the fragment shader unchanged:
	o_texcoords = i_texcoords;
	// Pass the input color to the fragment shader unchanged:
	o_color = i_color;
	// Calculate the light Dir
	o_lightDir = position_world.xyz - _light_pos;
	// output the View Dir
	o_viewDir = position_world.xyz - _camera_pos;
}
