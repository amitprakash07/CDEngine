/* #include statement (platform - independent) */
#include "shaders.common"

/* Uniform varibales (platform-independent) */
uniform mat4 g_local_world_matrix;

/* Input/Output variables (platform-specific) */
#if defined( EAEENGINE_PLATFORM_D3D9 )
// Entry Point
//============
void main(
	// Input
	//======
	// The "semantics" (the keywords in all caps after the colon) are arbitrary,
	// but must match the C call to CreateVertexDeclaration()

	// These values come from one of the sVertex that we filled the vertex buffer with in C code
	in const float3 i_position_local : POSITION,
	in const float2 i_texcoords : TEXCOORD0,
	in const float4 i_color : COLOR,

	// Output
	//=======
	// A POSITION value must always be output from every vertex shader
	// so that the GPU can figure out which fragments need to be shaded
	out float4 o_position : POSITION,
	// We need to output the uv for the fragment shader to sample color from textures
	out float2 o_texcoords : TEXCOORD0,
	out float4 o_color : COLOR
	)

#elif defined ( EAEENGINE_PLATFORM_GL )

// The locations assigned are arbitrary
// but must match the C calls to glVertexAttribPointer()

// These values come from one of the sVertex that we filled the vertex buffer with in C code
layout(location = 0) in vec3 i_position_local;
layout(location = 1) in vec2 i_texcoords;
layout(location = 2) in vec4 i_color;

// Output
//=======

// The vertex shader must always output a position value,
// but unlike HLSL where the value is explicit
// GLSL has an implicit required variable called "gl_Position"
layout(location = 0) out vec2 o_texcoords;
layout(location = 1) out vec4 o_color;

// Entry Point
//============
void main()
#endif

/* main() function definition (platform-independent) */
{
	// Calculate the position of this vertex on screen
	{
		// Any matrix transformations that include translation
		// will operate on a float4 position,
		// which _must_ have 1 for the w value
		// o_position = Transform(vec4(i_position_local, 1.0f), g_local_world_matrix);
		o_position = vec4(i_position_local, 1.0f);
	}
	// Pass the input uv to the fragment shader unchanged:
	{
		o_texcoords = i_texcoords;
	}
	// Pass the input color to the fragment shader unchanged:
	{
		o_color = i_color;
	}
}
